from typing import Any, Optional, Tuple, Type, Union

import gym
import numpy as np

from rllib.dataset.datatypes import Action, State

from .abstract_environment import AbstractEnvironment

class GymEnvironment(AbstractEnvironment):
    env: gym.envs.registration
    env_name: str
    _time: float
    def __init__(
        self, env_name: str, seed: Optional[int] = ..., **kwargs: Any
    ) -> None: ...
    def step(self, action: Action) -> Tuple[State, float, bool, dict]: ...
    def add_wrapper(self, wrapper: Type[gym.Wrapper], **kwargs: Any) -> None: ...
    def pop_wrapper(self) -> None: ...
    def close(self) -> None: ...
    def reset(self) -> State: ...
    def render(self, mode: str = ...) -> Union[None, np.ndarray, str]: ...
    def _reset(self) -> None: ...
    def _get_dim_reward(self) -> Tuple[int]: ...
    @property
    def state(self) -> State: ...
    @state.setter
    def state(self, value: State) -> None: ...
    @property
    def time(self) -> float: ...
    @property
    def name(self) -> str: ...
